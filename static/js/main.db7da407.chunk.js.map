{"version":3,"sources":["Components/utility.js","Components/CountryData.jsx","Components/Country.jsx","Components/Region.jsx","App.js","serviceWorker.js","index.js"],"names":["checkHidden","hidden","concatEntries","data","nameString","forEach","entry","name","CountryData","callingCodes","join","coordinates","latlng","timeZones","timezones","localNations","borders","currencies","languages","className","capital","subregion","population","area","numericCode","Country","props","state","toggleDisplay","bind","e","stopPropagation","currentState","this","setState","onClick","React","Component","compareNames","countryOne","countryTwo","comparePopulationDensities","densityOne","densityTwo","Region","countries","sortedByNameNotPopulation","sortDescending","sortData","order","alreadySorted","sortedCountries","sort","reversedCountries","reverse","status","region","fetch","then","response","json","toUpperCase","slice","disabled","map","country","key","alpha3Code","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db7da407.chunk.js","sourcesContent":["export function checkHidden(hidden) {\n    return hidden ? \"hidden\" : \"visible\";\n}","import React from 'react';\nimport { checkHidden } from './utility';\n\n// \"flag\": \"https://restcountries.eu/data/{alpha3Code}.svg\"\n\nfunction concatEntries(data) {\n    let nameString = \"\";\n        data.forEach(entry => nameString += entry.name + \", \");\n    return nameString;\n}\n\nfunction CountryData({ hidden, data })  {\n    const callingCodes = data.callingCodes.join(\", \");\n    const coordinates = data.latlng.join(\", \");\n    const timeZones = data.timezones.join(\", \");\n    const localNations = data.borders.join(\", \");\n    const currencies = concatEntries(data.currencies);\n    const languages = concatEntries(data.languages);\n    return(\n        <ul className={`country-data ${checkHidden(hidden)}`}>\n            <li><b>Calling Codes:</b> {callingCodes}</li>\n            <li><b>Capital:</b> {data.capital}</li>\n            <li><b>Subregion:</b> {data.subregion}</li>\n            <li><b>Population:</b> {data.population}</li>\n            <li><b>Coordinates:</b> {coordinates}</li>\n            <li><b>Area (square km):</b> {data.area}</li>\n            <li><b>Timezones:</b> {timeZones}</li>\n            <li><b>Bordering nations:</b> {localNations}</li>\n            <li><b>Numeric Code:</b> {data.numericCode}</li>\n            <li><b>Currencies:</b> {currencies}</li>\n            <li><b>Languages:</b> {languages}</li>\n        </ul>\n    );\n}\n\nexport default CountryData;","import React from 'react';\nimport CountryData from './CountryData';\n\nclass Country extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hidden: true,\n        }\n\n        this.toggleDisplay = this.toggleDisplay.bind(this);\n    }\n\n    toggleDisplay(e) {\n        e.stopPropagation();\n        const currentState = this.state.hidden;\n        this.setState({ hidden: !currentState });\n    }\n\n    render() {\n        const data = this.props.data;\n        return(\n            <li\n                className=\"country\"\n                onClick={this.toggleDisplay}>\n                <h3 className=\"country-title\">{data.name}</h3>\n                <CountryData data={data} hidden={this.state.hidden} />\n            </li>\n\n        );\n    }\n}\n\nexport default Country;","import React from 'react';\nimport Country from './Country';\nimport { checkHidden } from './utility';\n\nclass Region extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hidden: true,\n            countries: [],\n            sortedByNameNotPopulation: true,\n            sortDescending: false,\n        }\n\n        this.toggleDisplay = this.toggleDisplay.bind(this);\n        this.sortData = this.sortData.bind(this);\n        this.order = this.order.bind(this);\n        this.alreadySorted = this.alreadySorted.bind(this);\n    }\n\n    toggleDisplay() {\n        const currentState = this.state.hidden;\n        this.setState({ hidden: !currentState });\n    }\n\n    sortData(e) {\n        e.stopPropagation();\n        const { countries, sortedByNameNotPopulation } = this.state;\n        let sortedCountries;\n        if (sortedByNameNotPopulation) {\n            sortedCountries = countries.sort(comparePopulationDensities);\n        } else {\n            sortedCountries = countries.sort(compareNames);\n        }\n        this.setState({\n            countries: sortedCountries,\n            sortedByNameNotPopulation: !sortedByNameNotPopulation,\n        });\n    }\n\n    order(e) {\n        e.stopPropagation();\n        const { countries, sortDescending } = this.state;\n        const reversedCountries = countries.reverse();\n        this.setState({\n            countries: reversedCountries,\n            sortDescending: !sortDescending,\n        });\n    }\n\n    alreadySorted(status) {\n        return status ? true: false;\n    }\n\n    componentDidMount() {\n        const region = this.props.region;\n        fetch(`https://restcountries.eu/rest/v2/region/${region}`)\n        .then(response => {\n            return response.json();\n        }).then(json => {\n            this.setState({ countries: json });\n        });\n    }\n\n    render() {\n        const name = this.props.region;\n        const { countries, hidden, sortedByNameNotPopulation, sortDescending } = this.state;\n        return (\n            <li className=\"region\" onClick={this.toggleDisplay}>\n                <h2 className=\"region-title\">\n                    {name[0].toUpperCase() + name.slice(1)}\n                </h2>\n                <h3 className={`${checkHidden(hidden)}`}>\n                    Sort countries by:\n                </h3>\n                <div className=\"sort-buttons\">\n                    <button\n                        className={`${checkHidden(hidden)}`}\n                        disabled={this.alreadySorted(sortedByNameNotPopulation)}\n                        onClick={this.sortData}>\n                        name\n                    </button>\n                    <button\n                        className={`${checkHidden(hidden)}`}\n                        disabled={this.alreadySorted(!sortedByNameNotPopulation)}\n                        onClick={this.sortData}>\n                        population Density\n                    </button>\n                    <button\n                        className={`${checkHidden(hidden)}`}\n                        disabled={this.alreadySorted(!sortDescending)}\n                        onClick={this.order}>\n                        ascending\n                    </button>\n                    <button\n                        className={`${checkHidden(hidden)}`}\n                        disabled={this.alreadySorted(sortDescending)}\n                        onClick={this.order}>\n                        descending\n                    </button>\n                </div>\n                <ul className={`${checkHidden(hidden)}`}>\n                    {countries.map(country => {\n                        return <Country key={country.alpha3Code} data={country} />;\n                    })}\n                </ul>\n            </li>\n        );\n    }\n}\n\nfunction compareNames(countryOne, countryTwo) {\n    if (countryOne.name < countryTwo.name) {\n        return -1;\n    } else if (countryOne.name > countryTwo.name) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction comparePopulationDensities(countryOne, countryTwo) {\n    const densityOne = countryOne.population / countryOne.area;\n    const densityTwo = countryTwo.population / countryTwo.area;\n    if (densityOne < densityTwo) {\n        return -1;\n    } else if (densityOne > densityTwo) {\n        return 1;\n    }\n    return 0;\n}\n\nexport default Region;\n","import React from 'react';\nimport './App.css';\nimport Region from './Components/Region';\n\nfunction App() {\n  const regions = [\n    {name: \"africa\", key: 1 },\n    {name: \"americas\", key: 2 },\n    {name: \"asia\", key: 3 },\n    {name: \"europe\", key: 4 },\n    {name: \"oceania\", key: 5 }\n  ];\n  return (\n    <div className=\"App\">\n        <h1>RESTful Country Data</h1>\n        <ul className=\"region-list\">\n          {regions.map(region => {\n            return <Region key={region.key} region={region.name} />;\n          })}\n        </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}